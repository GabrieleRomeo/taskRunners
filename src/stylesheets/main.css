.evo_c-wow .l-list, .evo_c-animicon__sides {
  padding: 0;
  margin: 0; }

.evo_c-wow .l-list, .evo_c-animicon__sides {
  list-style-type: none; }

.evo_c-wow__video {
  position: relative; }
.evo_c-wow .l-control {
  width: 100%; }

.evo_c-animicon__sides {
  position: relative;
  width: 36px;
  height: 35px; }
.evo_c-animicon__side--1, .evo_c-animicon__side--2, .evo_c-animicon__side--3, .evo_c-animicon__side--4 {
  position: absolute;
  height: 3px;
  width: 100%; }
.evo_c-animicon__side--1 {
  top: 2px;
  left: 0;
  background-color: red;
  transform-origin: right;
  transform: rotate(-45deg); }
.evo_c-animicon__side--2 {
  top: 2px;
  right: 0;
  background-color: black;
  transform-origin: left;
  transform: rotate(45deg); }
.evo_c-animicon__side--3 {
  bottom: 0;
  left: 0;
  background-color: green;
  transform-origin: right;
  transform: rotate(45deg); }
.evo_c-animicon__side--4 {
  bottom: 0;
  right: 0;
  background-color: blue;
  transform-origin: left;
  transform: rotate(-45deg); }



/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
